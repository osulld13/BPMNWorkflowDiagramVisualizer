/*
 *function to get data relating to the current selected node
 */
function getCurrentItemData(){
  if (currentSelectedItem !== null &&
      currentSelectedItem !== undefined){
        return currentSelectedItem.data;
  }
}

/*
 * generates table based on selected node data
 * parses relevant node data into HTML table data
 * selects display table from HTML doc
 * replaces the data in the table with, new data
*/
function generateTableData(){

  var tableMetadata;
  var tableData = []

  if(currentSelectedItem !== undefined){
    //in the case of a node being the currrent selected item

    var data = getCurrentItemData();
    if(data.hasOwnProperty("nodeType")){
      tableMetadata = Object.getOwnPropertyNames(data);
    }
    //in the case of a conditional connection
    if(data.hasOwnProperty("condition")){
      tableMetadata = Object.getOwnPropertyNames(data);
      tableMetaData = tableMetadata.splice(tableMetadata.indexOf("from"), 1);
      tableMetaData = tableMetadata.splice(tableMetadata.indexOf("to"), 1);
    }

    //The autogenerated _gohasid property of each object should not be displayed in the table view
    tableMetadata.splice(tableMetadata.indexOf("_gohashid"), 1);

    for (var i = 0; i < tableMetadata.length; i++){
      tableData.push(data[tableMetadata[i]]);
    }

  }

  else {
    tableMetadata = Object.getOwnPropertyNames(currentProcess);
    tableMetaData = tableMetadata.splice(tableMetadata.indexOf("nodeData"), 1);
    tableMetaData = tableMetadata.splice(tableMetadata.indexOf("connections"), 1);
    tableMetaData = tableMetadata.splice(tableMetadata.indexOf("variables"), 1);

    //populate data using metadata
    for (var i = 0; i < tableMetadata.length; i++){
       tableData.push(currentProcess[tableMetadata[i]]);
    }

    //extend metadata using variables
    var variable_names = currentProcess.variables;
    for(var i = 0; i < variable_names.length; i ++){
      tableMetadata.push(variable_names[i].name);
    }

    //add variable values to metadata
    var variable_values = currentProcess.variables;
    for(var i = 0; i < variable_values.length; i ++){
      tableData.push(variable_values[i].value);
    }
  }

  var tableDataHTMLString = tableHTML(tableData, tableMetadata);
  var table = document.getElementById('dataDisplay');
  table.innerHTML = tableDataHTMLString;

}

/*
 * Passed metadata and data, this method will return a 2 collumn
 * table of that data
 */
function tableHTML(data, metadata){
  if( data !== null && data !== undefined){
    tableDataString = "";
    for( var i = 0; i < data.length; i ++){
      //each entry is capitilazed for readability
      tableDataString +=
        "<tr><td>" + capitalize(metadata[i].toString()) + "</td>" +
        "<td>" + capitalize(data[i].toString()) + "</td></tr>";
    }
    return tableDataString;
  }
}

/*
 * function to capitalize a string.
 */
function capitalize (text) {
    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
}
